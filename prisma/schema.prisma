generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  twitter_id    String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  surveys       Survey[]
  responses     Response[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id            String    @id @default(cuid())
  userId        String
  title         String
  choice_type   String    // TEXT_ONLY, TEXT_WITH_IMAGE, IMAGE_ONLY
  thumbnail_url String?
  votingEnd     DateTime  @default(dbgenerated("NOW() + interval '1 day'"))
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  choices       Choice[]
  attributes    AttributeSetting[]
  responses     Response[]
  comments      Comment[]
}

model Choice {
  id         String    @id @default(cuid())
  surveyId   String
  text       String?
  image_url  String?
  order      Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  survey     Survey    @relation(fields: [surveyId], references: [id])
  responses  Response[]
}

model AttributeSetting {
  id         String    @id @default(cuid())
  surveyId   String
  type       String    // AGE, GENDER, LOCATION, CUSTOM
  title      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  survey     Survey    @relation(fields: [surveyId], references: [id])
  choices    AttributeChoice[]
  responses  RespondentAttribute[]
}

model AttributeChoice {
  id                  String    @id @default(cuid())
  attributeSettingId  String
  text                String
  order               Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  attributeSetting    AttributeSetting @relation(fields: [attributeSettingId], references: [id])
  responses           RespondentAttribute[]
}

model Response {
  id         String    @id @default(cuid())
  surveyId   String
  userId     String
  choiceId   String
  created_at DateTime  @default(now())
  survey     Survey    @relation(fields: [surveyId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  choice     Choice    @relation(fields: [choiceId], references: [id])
  attributes RespondentAttribute[]

  @@unique([userId, surveyId])
}

model RespondentAttribute {
  id                  String    @id @default(cuid())
  responseId          String
  attributeSettingId  String
  attributeChoiceId   String
  created_at          DateTime  @default(now())
  response            Response         @relation(fields: [responseId], references: [id])
  attributeSetting    AttributeSetting @relation(fields: [attributeSettingId], references: [id])
  attributeChoice     AttributeChoice  @relation(fields: [attributeChoiceId], references: [id])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  surveyId   String
  userId     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  survey     Survey   @relation(fields: [surveyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}